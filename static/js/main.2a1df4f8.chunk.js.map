{"version":3,"sources":["sortingVisualizer/sortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["SortingVisualizer","props","state","bars","currentAlgorithm","delay","barColorR","barMaxHeight","maxNumBars","barWidth","numBars","Math","floor","this","newBars","i","push","setState","ceil","numSwitches","random","j","temp","Promise","all","renderSingleBar","setHeight","barDisplay","className","Button","variant","size","onClick","shuffle","DropdownButton","id","title","Dropdown","Item","changeSortingAlgorithm","sort","Form","Group","controlId","Label","style","color","Control","type","min","max","step","value","onChange","e","changeDelay","onInput","target","changeBarWidth","height","map","val","index","key","backgroundColor","width","newBarWidth","newAlgorithm","parseFloat","insertionSort","selectionSort","quickSort","mergeSort","combSort","bubbleSort","console","log","barArray","length","current","currentMinIndex","quickSortHelper","lowIndex","highIndex","depth","middleIndex","pivotNum","mergeSortHelper","absLowIndex","midIndex","leftArray","slice","rightArray","mergeSortMerger","splice","shift","gap","swap","combSortHelper","then","resolvedVal","resolve","setTimeout","barDisplayArray","document","getElementsByClassName","currentColor","sleep","curIndex","newHeight","currentBarStyle","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2a1df4f8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './sortingVisualizer.css';\r\nimport {Button, Dropdown, DropdownButton, Form} from 'react-bootstrap';\r\n\r\n//todo: move change the color of the bars back to orange in the SETHEIGHT fn!\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props); //something for React, just do it\r\n        this.state = { \r\n            bars: [],\r\n            currentAlgorithm: 'Insertion Sort',\r\n            delay: 30,\r\n            barColorR: 255,\r\n            barMaxHeight: 67,\r\n            //max height of the bars will be 67vh\r\n            maxNumBars: 180,\r\n            //max num bars will be 90 / 0.5; 90 is vw, 0.5 is the space taken up per bar\r\n            barWidth: 1,\r\n        }; \r\n\r\n        //bars is a list of random numbers representing the height/color of the bars. Turned into bars using css\r\n    }\r\n\r\n    componentDidMount() { \r\n        let numBars = Math.floor(this.state.maxNumBars / this.state.barWidth);\r\n        let newBars = [];\r\n        // for (let i = 0; i < this.state.maxNumBars; i ++) {\r\n        //     newBars.push(i * this.state.barMaxHeight/this.state.maxNumBars);\r\n        // }\r\n\r\n        for (let i = 0; i < numBars; i++) {\r\n            newBars.push(i * this.state.barMaxHeight/numBars);\r\n        }\r\n        this.setState({bars: newBars});\r\n    }\r\n\r\n    async shuffle() {\r\n        let numBars = Math.ceil(this.state.maxNumBars / this.state.barWidth);\r\n        let bars = this.state.bars;\r\n        let numSwitches = 500;\r\n        while(numSwitches >= 0) {\r\n            let i = Math.floor(Math.random() * numBars);\r\n            let j = Math.floor(Math.random() * numBars);\r\n            let temp = bars[i];\r\n            bars[i] = bars[j];\r\n            bars[j] = temp;\r\n            numSwitches--;\r\n\r\n            await Promise.all([this.renderSingleBar(i), this.renderSingleBar(j)]);\r\n            \r\n            this.setHeight(i, bars[i]);\r\n            this.setHeight(j, bars[j]);\r\n        }\r\n\r\n        this.setState({bars});\r\n    }\r\n\r\n    \r\n\r\n    render() { //method belonging to super class, must implement. For React to render this component   \r\n        \r\n        let barDisplay = this.state.bars;\r\n        return (\r\n            <div  className = \"sorting-visualizer\" >\r\n                <div className = \"menu-bar\">\r\n                    <div className = \"shuffle-area\">\r\n                        <Button variant = \"dark\" size = \"lg\" className = \"shuffle-button\" onClick = {() => this.shuffle()}>Shuffle</Button>\r\n                    </div>\r\n\r\n                    <div className = \"choose-algorithm-area\">\r\n                        <DropdownButton variant = \"dark\" size = \"lg\" id = \"dropdown-button\" title = {this.state.currentAlgorithm}>\r\n                            <Dropdown.Item onClick = {() => {this.changeSortingAlgorithm('Insertion Sort')}}>Insertion Sort</Dropdown.Item>\r\n                            <Dropdown.Item onClick = {() => {this.changeSortingAlgorithm('Selection Sort')}}>Selection Sort</Dropdown.Item>\r\n                            <Dropdown.Item onClick = {() => {this.changeSortingAlgorithm('Quick Sort')}}>Quick Sort</Dropdown.Item>\r\n                            <Dropdown.Item onClick = {() => {this.changeSortingAlgorithm('Merge Sort')}}>Merge Sort</Dropdown.Item>\r\n                            <Dropdown.Item onClick = {() => {this.changeSortingAlgorithm('Comb Sort')}}>Comb Sort</Dropdown.Item>\r\n                            <Dropdown.Item onClick = {() => {this.changeSortingAlgorithm('Bubble Sort')}}>Bubble Sort</Dropdown.Item>\r\n                        </DropdownButton>\r\n                    </div>\r\n\r\n                    <div className = \"sort-button-area\">\r\n                        <Button variant = \"dark\" size = \"lg\" className = \"sort-button\" onClick = {() => {this.sort()}}>Sort</Button>\r\n                    </div>\r\n\r\n                    <div className = \"sorting-speed-slider-area\">\r\n                        <Form>\r\n                            <Form.Group controlId = \"sortingSpeed\">\r\n                                <Form.Label style = {{color: \"white\"}}>Algorithm Speed</Form.Label>\r\n                                <Form.Control type = \"range\" min = \"0\" max = \"30\" step = \"6\" value = {this.state.delay}  \r\n                                    onChange = {(e) => {this.changeDelay(e)}}\r\n                                    onInput = {(e) => {this.changeDelay(e)}}\r\n                                />\r\n                            </Form.Group>\r\n                        </Form>\r\n                    </div>\r\n                    <div className = \"color-slider-area\">\r\n                        <Form>\r\n                        <Form.Group controlId = \"barColor\">\r\n                            <Form.Label style = {{color: \"white\"}}>Bar Colors</Form.Label>\r\n                            <Form.Control type = \"range\" min = \"0\" max = \"255\" step = \"1\" value = {this.state.barColorR}\r\n                                onChange = {(e) => {this.setState({barColorR: e.target.value})}}\r\n                                onInput = {(e) => {this.setState({barColorR: e.target.value})}}\r\n                            />\r\n                        </Form.Group>\r\n                        </Form>\r\n                    </div>\r\n\r\n                    <div className = \"bar-Width-slider-area\">\r\n                        <Form>\r\n                        <Form.Group controlId = \"barWidth\">\r\n                            <Form.Label style = {{color: \"white\"}}>Bar Width</Form.Label>\r\n                            <Form.Control type = \"range\" min = \"1\" max = \"5\" step = \"0.25\" value = {this.state.barWidth}\r\n                                onChange = {(e) => {this.changeBarWidth(e.target.value)}}\r\n                                onInput = {(e) => {this.changeBarWidth(e.target.value)}}\r\n                            />\r\n                        </Form.Group>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className = \"bar-display\" style = {{height: this.state.barMaxHeight}}>\r\n                    {barDisplay.map((val, index) => ( //!!! the brackets after the arrow HAVE to be ()\r\n                        <div className = \"single-bar\" \r\n                        key = {index}\r\n                        style = {\r\n                            {height: `${val}vh`,\r\n                            backgroundColor: `rgb(${this.state.barColorR},\r\n                            130,\r\n                            ${255*val/this.state.barMaxHeight})`,\r\n                            width: `${this.state.barWidth * 0.3}vw`,\r\n                            }\r\n                            }> \r\n                        \r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    changeBarWidth(newBarWidth) {\r\n        let numBars = Math.ceil(this.state.maxNumBars / newBarWidth);\r\n\r\n        let newBars = [];\r\n        for (let i = 0; i < numBars; i++) {\r\n            newBars.push(i * this.state.barMaxHeight/numBars);\r\n        }\r\n        this.setState({bars: newBars, barWidth: newBarWidth});\r\n    }\r\n\r\n    changeSortingAlgorithm(newAlgorithm) {\r\n        this.setState({currentAlgorithm: newAlgorithm});\r\n    }\r\n\r\n    changeDelay(e) {\r\n        this.setState({delay: parseFloat(e.target.value)});\r\n    }\r\n\r\n    sort() {\r\n        switch(this.state.currentAlgorithm) {\r\n            case 'Insertion Sort':\r\n                this.insertionSort(this.state.bars);\r\n                break;\r\n            case 'Selection Sort':\r\n                this.selectionSort(this.state.bars);\r\n                break;\r\n            case 'Quick Sort':\r\n                this.quickSort(this.state.bars);\r\n                break;\r\n            case 'Merge Sort':\r\n                this.mergeSort(this.state.bars);\r\n                break;\r\n            case 'Comb Sort':\r\n                this.combSort(this.state.bars);\r\n                break;\r\n            case 'Bubble Sort':\r\n                this.bubbleSort(this.state.bars);\r\n                break;\r\n            default:\r\n                console.log(\"please choose a sorting algorithm\");\r\n        }\r\n    }\r\n\r\n    //all the sorting algorithms\r\n    async insertionSort(barArray) {\r\n\r\n        for(let i = 1; i < barArray.length; i++) {\r\n            \r\n            let current = barArray[i];\r\n            let j = i - 1;\r\n\r\n            while (j >= 0 && current < barArray[j]) {\r\n                await this.renderSingleBar(j);\r\n                barArray[j + 1] = barArray[j];\r\n                this.setHeight(j+1, barArray[j+1]);\r\n                j--;\r\n            }\r\n            \r\n            barArray[j+1] = current;\r\n            this.setHeight(j+1, current);\r\n        }\r\n    }\r\n\r\n    async selectionSort(barArray) {\r\n\r\n\r\n        for (let i = 0; i < barArray.length; i++) {\r\n            let currentMinIndex = i;\r\n\r\n            for (let j = i + 1; j < barArray.length; j++) {\r\n                await this.renderSingleBar(j);\r\n                if(barArray[currentMinIndex] > barArray[j]) {\r\n                    currentMinIndex = j;\r\n                }\r\n            }\r\n            \r\n            // await Promise.all([this.renderSingleBar(i), this.renderSingleBar(currentMinIndex)]);\r\n            this.setHeight(i, barArray[currentMinIndex]);\r\n            this.setHeight(currentMinIndex, barArray[i]);\r\n\r\n            let temp = barArray[currentMinIndex];\r\n            barArray[currentMinIndex] = barArray[i];\r\n            barArray[i] = temp;\r\n\r\n\r\n        }\r\n    }\r\n\r\n    quickSort(barArray) {\r\n        this.quickSortHelper(barArray, 0, barArray.length - 1, 0);\r\n    }\r\n\r\n    async quickSortHelper(barArray, lowIndex, highIndex, depth) {\r\n        if(lowIndex >= highIndex) return; //guard for natural recursion\r\n        \r\n        let middleIndex = lowIndex; //middleIndex is where the pivotNum will end up in the end\r\n        let pivotNum = barArray[highIndex]; //setting the pivot number to be the final number in the array\r\n\r\n        for (let i = lowIndex; i < highIndex; i++) { //iterate through all numbers except pivotNum(the last element)\r\n            \r\n            await this.renderSingleBar(i);\r\n\r\n            if (barArray[i] < pivotNum) {\r\n                let temp = barArray[middleIndex]; \r\n                barArray[middleIndex] = barArray[i];\r\n                barArray[i] = temp;\r\n                middleIndex++;\r\n\r\n\r\n                this.setHeight(i, temp);\r\n                this.setHeight(middleIndex -1, barArray[middleIndex - 1]);\r\n            }\r\n        }\r\n\r\n        barArray[highIndex] = barArray[middleIndex];\r\n        barArray[middleIndex] = pivotNum;\r\n        //logic for partioning method from https://www.geeksforgeeks.org/quick-sort/\r\n\r\n        this.setHeight(highIndex, barArray[highIndex]);\r\n        this.setHeight(middleIndex, pivotNum);\r\n        //natural recursion\r\n        \r\n        await Promise.all([this.quickSortHelper(barArray, lowIndex, middleIndex - 1, depth++), \r\n            this.quickSortHelper(barArray, middleIndex + 1, highIndex, depth++)]);\r\n        \r\n    }\r\n\r\n\r\n    async mergeSort(barArray) {\r\n        this.mergeSortHelper(barArray, 0, barArray.length - 1);\r\n        //this.setState({bars: barArray});\r\n    }\r\n\r\n    async mergeSortHelper(barArray, absLowIndex) {\r\n        if (barArray.length <= 1) return; //guard for natural recursion\r\n        \r\n    \r\n        let midIndex = Math.floor(barArray.length / 2);\r\n\r\n    \r\n        let leftArray = barArray.slice(0, midIndex);\r\n        let rightArray = barArray.slice(midIndex, barArray.length);\r\n    \r\n        await Promise.all([this.mergeSortHelper(leftArray, absLowIndex), \r\n            this.mergeSortHelper(rightArray, absLowIndex + midIndex)]);\r\n        await this.mergeSortMerger(barArray, leftArray, rightArray, absLowIndex);\r\n    \r\n    }\r\n\r\n    async mergeSortMerger(barArray, leftArray, rightArray, lowIndex) {\r\n        for (let i = 0; i < barArray.length; i++) {\r\n            if (leftArray.length <= 0) {\r\n                barArray.splice(i);\r\n\r\n                for (let j = 0; j < rightArray.length; j++) {\r\n                    barArray.push(rightArray[j]);\r\n                    await this.renderSingleBar(lowIndex + i);\r\n                    this.setHeight(lowIndex + i, rightArray[j]);\r\n                    i++;\r\n                }\r\n                break;\r\n\r\n            } else if (rightArray.length <= 0) {\r\n                barArray.splice(i);\r\n                for (let j = 0; j < leftArray.length; j++) {\r\n                    barArray.push(leftArray[j]);\r\n                    await this.renderSingleBar(lowIndex + i);\r\n                    this.setHeight(lowIndex + i, leftArray[j]);\r\n                    i++;\r\n                }\r\n                break;\r\n            }\r\n    \r\n            if (leftArray[0] < rightArray[0]) {\r\n                barArray[i] = leftArray.shift();\r\n            } else {\r\n                barArray[i] = rightArray.shift();\r\n            }\r\n            await this.renderSingleBar(lowIndex + i);\r\n            this.setHeight(lowIndex + i, barArray[i]);\r\n        }\r\n    }\r\n\r\n    async combSort(barArray) {\r\n        let gap = barArray.length;\r\n\r\n        let swap = true;\r\n        while (gap > 1 || swap === true) {\r\n            gap = await this.combSortHelper(gap).then(resolvedVal => {return resolvedVal});\r\n            swap = false;\r\n\r\n            for (let i = 0; i < barArray.length - gap; i++) {\r\n                if (barArray[i] > barArray[i + gap]) {\r\n                    let temp = barArray[i];\r\n                    barArray[i] = barArray[i + gap];\r\n                    barArray[i + gap] = temp;\r\n                    swap = true;\r\n\r\n                    await Promise.all([this.renderSingleBar(i), this.renderSingleBar(i + gap)]);\r\n                \r\n                    this.setHeight(i, barArray[i]);\r\n                    this.setHeight(i + gap, barArray[i + gap]);\r\n                    \r\n                }\r\n            }\r\n        }\r\n        this.setState({bars: barArray});\r\n    }\r\n\r\n    async combSortHelper(gap) {\r\n        //the \"shrink factor\" will be 1.3\r\n        gap = Math.floor(gap / 1.3);\r\n        return (gap <=1? 1 : gap);\r\n    }\r\n\r\n    async bubbleSort(barArray) {\r\n        for (let i = 0; i < barArray.length; i++) {\r\n            for (let j = 0; j < barArray.length - i - 1; j++) {\r\n                if (barArray[j] > barArray[j+1]) {\r\n                    let temp = barArray[j];\r\n                    barArray[j] = barArray[j + 1];\r\n                    barArray[j + 1] = temp;\r\n\r\n                    await Promise.all([this.renderSingleBar(j),\r\n                        this.renderSingleBar(j + 1)]);\r\n                    \r\n                    this.setHeight(j, barArray[j]);\r\n                    this.setHeight(j + 1, barArray[j + 1]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    //sleep function using setTimeout from https://stackoverflow.com/questions/951021/what-is-the-javascript-version-of-sleep\r\n    sleep() {\r\n        return new Promise(resolve => setTimeout(resolve, 30.00001 - this.state.delay));\r\n    }\r\n\r\n    async renderSingleBar(index) {\r\n        let barDisplayArray = document.getElementsByClassName(\"single-bar\");\r\n        let currentColor = barDisplayArray[index].style.backgroundColor;\r\n        barDisplayArray[index].style.backgroundColor = \"black\";\r\n        await this.sleep();\r\n        barDisplayArray[index].style.backgroundColor = currentColor;\r\n    }\r\n\r\n    async setHeight(curIndex, newHeight) {\r\n        let barDisplayArray = document.getElementsByClassName(\"single-bar\");\r\n        await this.sleep();\r\n        let currentBarStyle = barDisplayArray[curIndex].style;\r\n        currentBarStyle.height = `${newHeight}vh`;\r\n        currentBarStyle.backgroundColor = `rgb(${this.state.barColorR}, 130, ${255*newHeight/this.state.barMaxHeight})`\r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n    //insertion sort --- done\r\n    //selection sort --- done\r\n    //quick sort --- done\r\n    //merge sort --- done\r\n    //comb sort --- done\r\n    //bubble sort  --- done\r\n    //heap sort\r\n    //counting sort\r\n    //radix sort\r\n    //bucket sort\r\n    //shell sort\r\n    //cocktail sort\r\n\r\n    // cancel button\r\n    // change mergesort a bit?\r\n    // sound effects\r\n    // slider bar to adjust number of things to sort\r\n\r\n    \r\n    \r\n    \r\n\r\n    \r\n}","import React from 'react';\nimport SortingVisualizer from './sortingVisualizer/sortingVisualizer';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer> {/*creates a sortingVisualizer object/element in this div*/}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}